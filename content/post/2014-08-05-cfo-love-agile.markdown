---
author: varokas
comments: true
date: 2014-08-05 05:47:03+00:00
slug: cfo-love-agile
title: 5 เหตุผลที่ CFO คุณจะตกหลุมรัก Agile
wordpress_id: 774
categories:
- Software Engineering
tags:
- agile
- cfo
- finance
---

[![cfo-final](/images/2014/08/cfo-final.jpg)](/images/2014/08/cfo-final.jpg)

อไจล์หลายทีมเริ่มมาจากกลุ่มของโปรแกรมเมอร์เอา practice ต่างๆ ของ Scrum, Kanban, XP มาลองทำแล้วก็พบว่า ส่งมอบของได้เรื่อยๆสม่ำเสมอ ลูกค้ามีความสุข แล้วทีมก็มีความสุข ทุกคนมีความสุข

แต่พอไปเสนอกับฝ่ายบัญชีหรือจะเป็นท่าน CFO โดยตรงอาจจะโดนถามว่า "สนุกแล้วงานเสร็จเร็วขึ้นหรอ?" ก็คงมึนกันไปซักพัก

เพราะฝ่ายบัญชีเป็นผู้กุมกระเป๋าตังค์ของบริษัทต้องคิดรอบคอบว่าทุกอย่างในบริษัทจะต้องทำให้บริษัทมีกำไรต่อไป เกิดเงินหมุนเวียนมาจ่ายเหล่าพนักงานผู้มีความสุขกับการส่งมอบซอฟต์แวร์อย่างสม่ำเสมอ คำถามเรื่องเงินๆทองๆ ก็เป็นเรื่องธรรมดา
<!--more-->

เรามาดูกันว่าทำไม CFO คุณถ้าได้ลองอไจล์แล้ว จะติดหนึบไม่ไปไหน เอาไว้ไปคุยกันจะได้มีความสุขครบกันทุกคน



## 1. Projected Revenue จะแม่นขึ้น



เวลาบริษัทรายงานบัญชีประจำไตรมาส ต้องมีการรายงานว่า ผลประกอบการในช่วงไตรมาสถัดไป ลากรวมถึงตอนสิ้นปี มันจะเป็นเท่าไหร่? จากนั้นจะมี Audit มาช่วยตรวจว่ามันทำได้จริง ไม่ได้ขี้โม้ขึ้นมาเฉยๆ

ถ้าเป็นแบบ Waterfall ปกติ จะโดนถามอยู่แล้วว่า 
1. โปรเจคจะจบเมื่อไหร่?
2. ค่าใช้จ่ายมีเท่าไหร่?  (เครื่องมือ, staff, etc)
3. เสร็จแล้วมันจะขายได้เท่าไหร่? (ถ้าจะเอาไปขายนะ)

เลขเหล่านี้ก็ได้มาจากการประมาณการ (estimate) ของเจ้าของโปรเจค ก็ไปทำ work breakdown, gantt chart มาว่าจะใช้อะไร เท่าไหร่? เมื่อไหร่? สวมหมวกหมอดูแล้วก็เสกตัวเลขออกมา(อย่างมีหลักการ)

ซึ่งก็รู้ๆ กันอยู่แล้วว่า เลขทั้งสามตัวข้างบนทั้งหมด มันไม่เคยจะแม่นเลย... ใช่ไหม? โดยเฉพาะคำถามหลักคือ มันเสร็จเมื่อไหร่? เพราะจะได้ขายได้ มีเงินมาใช้หมุนเวียน

บัญชีเค้าก็รู้อยู่แล้วว่าไม่มีใครทายอนาคตได้เป๊ะหรอก ก็ต้องมีการมาปรับแก้กันทุกไตรมาส ตามการประมาณการรอบใหม่ที่ไปถามมาจากโปรเจคต่างๆ

ถ้าเป็น waterfall เวลา estimate ใหม่จะเอามาจากอะไรล่ะ? ถ้าไม่คิดมากก็ดูว่าเกินมาเท่าไหร่ ง่ายๆ คือ ถ้าตอนนี้เราเกินจากแผนไปเดือนนึง ก็เพิ่มตอนจบไปเดือนนึง...

ปัญหาคือแล้วมีอะไรรับประกันว่า ตอนช่วงหลังๆมันจะทำงานได้ตามที่วางแผน เช่น ตอนนี้กำลังเก็บ requirement และ design อยู่ แล้วใช้เวลาเกินไปจากแผนในขั้นนี้ 10% จะคิดง่ายๆ ได้ไหมว่าทุกๆ phase ของการทำงาน (dev/test/deploy) ก็จะเกินมา 10% เหมือนกัน? หรือจะบอกว่าไม่เกินหรอก(แล้วค่อยไปเพิ่มเอาทีหลัง)​ จะทำแบบไหนดี? จะบอกให้คนอื่นเชื่อตามเราได้ยังไงว่าประเมินขั้นถัดไปถูกต้อง?

[![ที่มา: http://www.virtualboss.net/screenshots/ganttchart.htm](/images/2014/08/ganttchart.gif)](/images/2014/08/ganttchart.gif) ที่มา: http://www.virtualboss.net/screenshots/ganttchart.htm

เอาข้อมูลจากในอดีตไหม? ปกติเราใช้เวลาเกินไปเท่าไหร่? แล้วโปรเจคไหนเอามาเทียบได้? ความเสี่ยงเท่ากันไหม? คนทำกลุ่มเดียวกันหรือเปล่า? (มึนหรือยัง?)

อไจล์ช่วยตรงจุดนี้ได้เพราะเราจงใจทำ software ทั้งกระบวนการจนกระทั่งเข็น feature มาใช้งานได้จนจบเลยในไม่กี่สัปดาห์ สมมติว่าเรามีของใน backlog ของงานอยู่ 100 หน่วย ทำเสร็จไปแล้ว 20 หน่วยในเดือนเดียว คิดเลขไม่ยากเลยใช่ไหม? ว่าอีก 4 เดือนก็น่าจะเสร็จอีก 80 หน่วยที่เหลือ (ยังไม่นับว่าของที่เสร็จแล้วอาจจะเอาไปใช้งานได้ประโยชน์ก่อนด้วยนะ)

[![Screen Shot 2014-08-04 at 10.05.56 PM](/images/2014/08/Screen-Shot-2014-08-04-at-10.05.56-PM.png)](/images/2014/08/Screen-Shot-2014-08-04-at-10.05.56-PM.png)

จุดสำคัญคือ มั่นใจในตัวเลขประมาณการได้มากกว่าเยอะ เอาข้อมูลจากในโปรเจคจริงๆ ที่ทำนั่นแหละ มาประมาณสิ่งที่จะเกิดต่อไปในอนาคต กิจกรรมทุกแบบของโปรเจคในอีก 80 หน่วยที่เหลือ เราทำหมดแล้วใน 20 หน่วยแรก ตั้งแต่เก็บข้อมูล ออกแบบ เขียน เทส จนเข็นออกมาลองใช้งานดู

โปรเจคเดียวกัน ความเสี่ยง ทีมงาน เครื่องมือ เหมือนกัน ก็สามารถเอาความเร็วในการทำงานตอนแรก มาใช้ประเมินสิ่งที่เหลือได้อย่างมั่นใจ

ของแถมคือทีมอไจล์(โดยเฉพาะสกรัม) ส่วนมากทำการประเมินตรงนี้เป็นประจำอยู่แล้วตอนผ่าน Release Burndown เดินไปถามได้ทันทีทุกเวลาที่ต้องการ

[![รูปจาก http://www.mountaingoatsoftware.com/agile/scrum/release-burndown](/images/2014/08/releaseburndown.png)](/images/2014/08/releaseburndown.png) รูปจาก http://www.mountaingoatsoftware.com/agile/scrum/release-burndown



## 2. ค่าใช้จ่ายตรงไปตรงมา



อไจล์ทำให้ตัดคำถามอมตะที่น่าปวดหัวออกไปได้ว่า "ใช้ทีมไหนเมื่อไหร่?" (Dev, QA, BA, test, infra, ...)

ถ้าเป็น waterfall ก็ต้องมาเล็งว่า กี่เดือนจะเก็บ requirement เสร็จ แล้วจะได้เอาทีม Dev มาเสียบต่อ แล้วถ้าเค้าไม่เสร็จตามกำหนดล่ะ? จะต้องไปทำเรื่องคุยกับใครว่าต้องดึง BA มานานอีกหน่อย? ชะลองานของ Dev ออกไปไหม? (ช่วงนี้ก็เกิดอาการสูญญ�����กาศ "ว่างงาน" ของทีม Dev ไป)

[![Waterfall รักคนไม่เ���่ากัน แล้วแต่อยู่ช่วงไหนของโปรเจค](/images/2014/08/illustration.png)](/images/2014/08/illustration.png) Waterfall รักคนไม่เท่ากัน แล้วแต่อยู่ช่วงไหนของโปรเจค

โปรเจคอไจล์ถ้าบริหารอย่างถูกต้อง จะต้องมีการ "ใช้ทุก role ตลอดเวลา" เพราะกระบวนการทั้งหมดตั้งแต่ Requirement/Design/Code/Test/Deploy จะถูกหดลงมาสั้นๆ แค่สองอาทิตย์ หรือ น้อยกว่านั้น ถ้ามองรวมๆ ในแต่ละอาทิตย์ก็ดูเหมือนว่าต้องใช่ทุกส่วนอยู่ตลอดเวลา จะต้องใช้ใครจำนวนมากน้อยเท่าไหร่อันนี้แล้วแต่

ประเด็นหลักคือ ใช้ทุกคนอย่างสม่ำเสมอ ไม่มีใคร "งานเข้า" ช่วงไหนเป็นพิเศษ

[![อไจล์ทำเหมือนเดิมทุกรอบ ใช้คนเท่าๆ เดิมทุกรอบ](/images/2014/08/illustration2.png)](/images/2014/08/illustration2.png) อไจล์ทำเหมือนเดิมทุกรอบ ใช้คนเท่าๆ เดิมทุกรอบ

ค่าใช้จ่ายในการดำเนินงาน (Operating Expenses - ไม่รวมค่าเครื่องมือ อุปกรณ์) ก็เป็นสัดส่วนคงที่ dev 4 คน QA 1 คน Product Owner 1 คน ไปเรื่อยๆ จนกว่าจะขี้เกียจทำโปรเจคนี้ต่อ



## 3. มองเห็น ROI เร็วขึ้น



ถ้าอไจล์ทำให้ออกของที่มีคุณค่าได้สม่ำเสมอทุกสองอาทิตย์ ก็แปลว่า ไม่ต้องรอจน "จบโปรเจค" ก็จะมีของที่ใช้งานได้เป็นส่วนๆออกมาให้จิ้มเล่นกัน ทีนี้ขึ้นอยู่กับการตัดสินใจของฝ่านธุรกิจล้วนๆ ว่าจะเอาไปให้ผู้ใช้เริ่มใช้งานได้เมื่อไหร่?

ซึ่งคำตอบที่ถูกต้อง คือ ...​ ถ้าของมีประโยชน์ก็หาทางให้เริ่มใช้ได้เลยสิ จะหมักเอาไว้ทำไม?

[![Screen Shot 2014-08-04 at 10.24.10 PM](/images/2014/08/Screen-Shot-2014-08-04-at-10.24.10-PM.png)](/images/2014/08/Screen-Shot-2014-08-04-at-10.24.10-PM.png)

จากนั้นก็เอาข้อมูลจากการเข็นออกไปเริ่มใช้งานนั่นแหละมาดูว่า ตกลงมันทำกำไร ยอดขาย หรือได้ประโยชน์อื่นๆ จริงอย่างที่โม้ไว้หรือเปล่า? ถ้าใครเอาทฤษฎีจาก Lean Startup มาตั้งสมมติฐานแล้ววัดผลประกอบไปด้วยจะเยี่ยมมาก

ค่าใช้จ่ายรู้อยู่แล้วจากข้อ (2) ว่ามันคงที่สม่ำเสมอ ถ้า Revenue มาเร็วจากการเอาไปใช้งานจริง ก็เริ่มคำนวน ROI จากวันที่ลองใช้งานได้เลย

ไม่ต้องรออีกสองปีโปรเจคจบ ปล่อยของใหญ่ออกไปทีเดียว แล้วค่อยมาลุ้นกัน

[![ในอไจล์จะมี revenue กลับมาบ้าง แทนที่จะเสียๆๆ ตอนแรกอย่างเดียว (รูปจาก http://tiny-giant-books.com/blog/agile-value-dark-horse-whats-your-backlog-pattern/)](/images/2014/08/Agile-Dark-Horse-Release-Value.jpg)](/images/2014/08/Agile-Dark-Horse-Release-Value.jpg) ในอไจล์จะมี revenue กลับมาบ้าง แทนที่จะเสียๆๆ ตอนแรกอย่างเดียว  
(รูปจาก http://tiny-giant-books.com/blog/agile-value-dark-horse-whats-your-backlog-pattern/)

ซึ่งการมีของออกมาให้จิ้มได้สัมผัสได้เร็วขึ้นก็จะมีผลดีคือ...



## 4. ความเสี่ยงถูกประเมินเร็วขึ้น



อันนี้อาจจะไม่มีผลโดยตรงกับการลงบัญชี(รึเปล่า?) แต่จะมีผลโดยตรงกับการประหยัดค่าใช้จ่ายมากๆ ในกรณีที่โปรเจคมีความเสี่ยงสูง

ถ้าบริหารโปรเจคอไจล์ถูกต้อง ช่วงต้นจะต้องพยายามทำสิ่งที่มีความเสี่ยงสูงสุดของโปรเจคก่อน เข็นออกมาให้เห็นว่า ความเสี่ยงที่ประเมินไว้ มันมีอยู่จริงหรือมันเป็นความกลัวไปเองของเรา

อไจล์เน้นมากๆ ให้ทำและพิสูจน์ความเสี่ยงใหญ่ๆ ให้เห็นตั้งแต่แรกเลยว่าไปรอด(หรือไม่รอด) ผ่านทางการเอาความเสี่ยงพวกนั้นแหละมาเขียนให้อยู่ในรูปของ feature/user story ให้ได้แล้วเข็นออกมาให้ใช้ในรีลีสแรกๆ เดือนแรกๆ

[![โปรเจคอไจล์ลดความเสี่ยงตั้งแต่เนิ่นๆ](/images/2014/08/ip.png)](/images/2014/08/ip.png)โปรเจคอไจล์ลดความเสี่ยงตั้งแต่เริ่ม  
(รูปจาก: http://dandriani.wordpress.com/category/lifecycle-processes/)

ต่างจากแบบ Waterfall ที่เราอาจจะมีระบบการบริหารจัดการความเสี่ยงของโปรเจคยังไงก็ได้ ไม่รู้เหมือนกัน (ก็แล้วแต่บริษัทจะระบบดีหรือไม่ดียังไง) ถ้าไม่คอยลงไปดูส่วนมากทีมก็มักจะทำ "ของง่ายๆ" ก่อนเพราะมันง่ายดี และทำให้เห็นผลงานออกมาเหมือนว่าจะราบรื่น แล้วก็เอาของยากๆ น่ากลัวๆ ไปหมกๆ ไว้ตอนหลัง

[![Waterfall ความเสี่ยงอาจจะโดนโยนกองไว้ระเบิดตอนท้ายๆ](/images/2014/08/wfp1.png)](/images/2014/08/wfp1.png) Waterfall ความเสี่ยงอาจจะโดนโยนกองไว้ระเบิดตอนท้ายๆ  
(รูปจาก: http://dandriani.wordpress.com/category/lifecycle-processes/)

การทำออกมาให้มันรู้ๆไปเลยตั้งแต่แรก ว่าอะไรเป็นอะไร เปลี่ยนจากของที่เคยเป็น "ความเสี่ยง" ให้กลายมาเป็น "ปัญหา" หรือ "ไม่ใช่ปัญหา" ให้เร็วที่สุดจะได้เห็นกันตั้งแต่เนิ่นๆ ไม่ต้องพยายามมาหมักไว้นานๆ แล้วระเบิดตูมทีเดียวอีกสองปีข้างหน้า



## 5. ตัดสินใจได้เร็วขึ้นมั่นใจขึ้น



ปกติแล้วเราดู ROI กับความเสี่ยงกันไปทำไมล่ะ?

ในโลกธุรกิจ คำถามและคำตอบสุดท้ายก็คือ ทำแล้วมันกำไรดีไหม? คุ้มไหม? ทำต่อดีไหม?

แน่นอนว่าของทุกอย่างในโลกมันไม่ได้ทำแล้วขายได้ตามที่หวัง ไม่ว่าจะเป็นความเสี่ยงตัวใหญ่ๆที่ระเบิดใส่ หรือเอาไปขายแล้วไม่ติดตลาดเท่าที่คิดไว้? ���้ารู้ตั้งแต่แรกๆ จะตัดสินใจเลิกทำเพื่อจำกัดความวอดวายไหม? จะยอมเสียเงินน้อยๆแทนที่จะพยายามลากไปแล้วเสียมากๆตอนจบไหม?

กลับกันมันอาจจะติดตลาดกว่าที่เราคิดก็ได้ ของอยู่ๆ จะเป็น viral มักจะไม่มีสัญญาณเตือนเราด้วย วันนึงยอดคนใช้ก็พุ่งปรี๊ดขึ้นมา ฮิตติดตลาดไลค์เป็นแสน ทวีตเป็นล้าน ถึงวันนั้น เราอยากจะโยกคนมาโปรเจคนี้มากขึ้นไหม? เราอยากทุ่มพลังเพื่อสร้างกำไรมากขึ้นหรือเปล่า?

[![Data Driven or Luck Driven? (รูปจาก: http://www.askingsmarterquestions.com/data-driven-marketing-steps-for-seo-keyword-analysis/)](/images/2014/08/SEO_keyword_analysis_list.jpg)](/images/2014/08/SEO_keyword_analysis_list.jpg) Data Driven or Luck Driven?  
(รูปจาก: http://www.askingsmarterquestions.com/data-driven-marketing-steps-for-seo-keyword-analysis/)

คำถามเหล่านี้คงไม่สามารถตอบกันได้ง่ายๆ ซึ่งอไจล์ไม่ได้ช่วยให้ปัญหาสองอย่างนี้หมดไป

แต่อไจล์ช่วยได้อย่างชัดเจนคือ สร้างข้อมูลผ่านของที่ใช้งานจริง เพื่อประกอบการตัดสินใจได้ว่า ของมันขายได้หรือไม่ได้ ทำแล้วมีผลดีจริงหรือไม่จริง ข้อมูลการตัดสินใจเกิดจากข้อมูลที่สร้างขึ้นเองในวันนี้ ทำให้มั่นใจกว่าประมาณการของที่ยังไม่มีอะไรให้ลองดูนอกจากเอกสารดีไซน์เปล่าๆ

และของแถมคือ วันที่คุณตัดสินใจเลิกทำโปรเจคอะไร วันนั้นก็มีของที่ใช้งานได้ มีคุณค่า เท่ากับวันที่ "ตัดจบ" นั่นแหละ ไม่ได้เป็นเอกสาร requirement/design มากองๆ ไว้ หรือ โปรแกรมที่เขียนไว้ครึ่งๆ ยังไม่ถูกพิสูจน์ว่ามีคุณค่าจริงหรือเปล่า



## ส่งบ่อยๆ



ทั้งหมดนี้ถ้าจะสรุปง่ายๆ มันคือ ประโยชน์ที่เกิดจากการส่งมอบของที่เกิดคุณค่าได้บ่อยๆ แทนที่จะกั๊กไว้ปล่อยทีเดียวเท่านั้นเองครับ อธิบายในแง่ของการเงิน ความเสี่ยง และการบริหารโปรเจค เข้าใกล้โลกของการเงินหน่อย แทนที่จะอยู่ในมุมของโปรแกรมเมอร์อย่างเดียว

เท่านี้ CFO ก็ยิ้มได้แล้วครับ
